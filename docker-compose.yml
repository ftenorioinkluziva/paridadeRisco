services:
  # Backend Flask com Scheduler Integrado
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      # Flask configuration
      - FLASK_ENV=development
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5001
      - FLASK_DEBUG=false
      
      # Database configuration
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=paridaderisco
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      
      # Python configuration
      - PYTHONUNBUFFERED=1
      - PYTHONIOENCODING=utf-8
      - TZ=America/Sao_Paulo
      
      # Modo de execução: integrated (Flask + Scheduler)
      - RUN_MODE=integrated
      
      # Scheduler configuration
      - SCHEDULER_ENABLED=true
      - SCHEDULER_TIMEZONE=America/Sao_Paulo
      - SCHEDULER_MAX_WORKERS=2
      - SCHEDULER_LOG_LEVEL=INFO
      
      # Jobs configuration
      - SCHEDULER_YAHOO_ENABLED=true
      - SCHEDULER_YAHOO_HOUR=8
      - SCHEDULER_YAHOO_MINUTE=0
      - SCHEDULER_RTD_COMERCIAL_ENABLED=false
      - SCHEDULER_RTD_COMERCIAL_INTERVAL=30
      - SCHEDULER_RTD_NOTURNO_ENABLED=false
      - SCHEDULER_SAUDE_ENABLED=true
      - SCHEDULER_SAUDE_INTERVAL=120
      
    restart: unless-stopped
    ports:
      - "5002:5001"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    depends_on:
      - backend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:5002/api
    ports:
      - "8080:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=paridaderisco
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migration/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d paridaderisco"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: paridaderisco_network